use anyhow::Result;
use clap::Parser;

/// Prints your text in a text bubble with KittyCAD as ASCII art
///
///     $ kittycad say
#[derive(Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdSay {
    /// What kitty says
    #[clap(name = "input", required = false, multiple_values = true)]
    pub input: Vec<String>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdSay {
    async fn run(&self, ctx: &mut crate::context::Context) -> Result<()> {
        let kitty_string = "                                                  
        .....                                 
       .::-:...            .....              
      ..:---..:...        .::::...            
     ..------:.::::::::::.:----......         
  .::::------:::::::::::..------:..::::::::-. 
.::::..........::::::::::::::----:::::::::---. 
::::::::::::::::::::::::...........::::::::---. 
:--:::::::::::::::::::::::::::::::::::::::----. 
:--::=#@@@%%%###***+++===---::::::::--::-=----. 
:--::#@@@@@@@@@@@@@@@@@@@@@@@@@#-:::---:=-=---. 
:--::#@@@@@@@@@@@@@@@@@@@@@@@@@@@:::----++=---. 
:--::#@@@@%***#@@@@@@@@@*+*@@@@@@:::----=+----. 
:--::#@@@**%%%#+@@@@@@@@=-=@@@@@@:::----------  
:---:#@@@@@@@@@@@%%%%@@@=-=@@@@@@:::---------=  
-----#@@@@@@@**@@#+-+#@@#%%@@@@@@:::--------==  
-----#@@@@@@@@%+#%#-%@%+*#@@@@@@@::--------===  
-----*%@@@@@@@@@***+++*%@@@@@@@@@----------===. 
------=+***####%%%@@@@@@@@@@@@@@@---------====. 
----------::::::::::::--===+++*+:--------=====  
--==---===---::::::::::::::::-----------=====+  
-------+**+----------------------------====***  
---------------::::::::::------------======#**  
-----=+++++-----------------=-=--=---======*+=  
-----=+++++--#@@@%%%%###+---=-=--+---======:.   
.......::----+####%%%%@@*---++++++---===:.      
      .*########*:.......:==--------.         
    :*#%%%%%%%%%%+       -%######*#+.         
    =#########%%%+     =#%%%%%%%%%##-         
    -++***#####=.      *############:         
                       -==++***##+:           
";
        writeln!(ctx.io.out, "{}", kitty_string).ok();
        writeln!(ctx.io.out, "{}", self.input.join(" ")).ok();
        Ok(())
    }
}
