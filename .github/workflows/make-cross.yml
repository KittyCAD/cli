on:
  push:
    branches:
      - main
    paths:
      - '**.rs'
      - Cargo.toml
      - Cargo.lock
      - .github/workflows/make-cross.yml
      - Makefile
      - 'rust-toolchain'
      - 'rust-toolchain.toml'
      - 'spec.json'
  pull_request:
    paths:
      - '**.rs'
      - Cargo.toml
      - Cargo.lock
      - .github/workflows/make-cross.yml
      - .github/workflows/cargo-build.yml
      - 'rust-toolchain'
      - 'rust-toolchain.toml'
      - 'spec.json'
name: make cross
jobs:
  cross:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
    name: make cross
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@master
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
            components: rustfmt, clippy
      - if: ${{ matrix.os == 'ubuntu-latest' }}
        name: Install deps
        shell: bash
        run: |
          ./.github/workflows/cross-deps.sh
      - if: ${{ matrix.os == 'macos-latest' }}
        name: Install deps
        shell: bash
        run: |
          brew install \
            coreutils \
            jq
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Run make cross
        run: |
          export PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
          make release
          ls -la cross
        shell: bash
  homebrew:
    name: homebrew
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Install deps
        shell: bash
        run: |
          ./.github/workflows/cross-deps.sh
      - name: Run homebrew.sh
        shell: bash
        run: |
          mkdir homebrew
          cp homebrew-template.rb homebrew/kittycad.rb

          input_names=(
            "x86_64-apple-darwin"
            "aarch64-apple-darwin"
            "x86_64-unknown-linux-musl"
            "aarch64-unknown-linux-musl"
          )
          homebrew_names=(
            "x86_64_darwin"
            "aarch64_darwin"
            "x86_64_linux"
            "aarch64_linux"
          )

          to_zip_files=""
          version=v$(toml get Cargo.toml package.version | jq -r .)
          sed -i "s#replace-semver#$version#g" "./homebrew/kittycad.rb"

          for i in "${!input_names[@]}"; do
            input_name="${input_names[$i]}"
            homebrew_name="${homebrew_names[$i]}"
            
            mkdir "./homebrew/$homebrew_name"
            curl -L "https://dl.kittycad.io/releases/cli/$version/kittycad-$input_name" -o "./homebrew/$homebrew_name/kittycad"

            sha256=$(sha256sum "./homebrew/$homebrew_name/kittycad")
            hash=$(printf '%s\n' "$sha256" | cut -d' ' -f1)
            sed -i "s#replace-$homebrew_name-sha#$hash#g" "./homebrew/kittycad.rb"

            to_zip_files="$to_zip_files $homebrew_name/kittycad"
          done

          (cd ./homebrew && tar -czvf kittycad-cli.tar.gz $to_zip_files)

          sha256=$(sha256sum "./homebrew/kittycad-cli.tar.gz")
          hash=$(printf '%s\n' "$sha256" | cut -d' ' -f1)
          sed -i "s#replace-tarball-sha#$hash#g" "./homebrew/kittycad.rb"

          # clean up
          for homebrew_name in "${homebrew_names[@]}"; do
            rm -rf "./homebrew/$homebrew_name"
          done

          echo "tarball and formula"
          (cd ./homebrew && ls)
          echo "formula contents"
          cat ./homebrew/kittycad.rb
